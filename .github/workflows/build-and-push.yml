name: Build and Push Docker Image to AWS ECR

on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the 'main' branch

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  # Construct the full ECR repository URI
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
  # Define the container name as it will appear in your ECS Task Definition
  CONTAINER_NAME: nginx-app-container # This should match the 'name' field of your container in the ECS task definition

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use actions/checkout to get your repository code

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2 # This action logs Docker into ECR

      - name: Build and push Docker image
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }} # Use the Git commit SHA as the image tag
        run: |
          # Build the Docker image
          docker build -t ${ECR_REGISTRY}:${IMAGE_TAG} -t ${ECR_REGISTRY}:latest .

          # Push the Docker image to ECR
          docker push ${ECR_REGISTRY}:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}:latest
          echo "Pushed image ${ECR_REGISTRY}:${IMAGE_TAG} and ${ECR_REGISTRY}:latest to ECR."

          # Output the image URI for subsequent deployment steps (Phase 4)
          echo "image_uri=${ECR_REGISTRY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

